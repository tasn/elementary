enum Elm.Thumb.Animation_Setting
{
   [[Used to set if a video thumbnail is animating or not]]
   legacy: elm_thumb_animation;
   start = 0, [[Play animation once]]
   loop, [[Keep playing animation until stop is requested]]
   stop, [[Stop playing the animation]]
   last
}

class Elm.Thumb (Elm.Layout, Efl.File, Evas.Clickable_Interface,
                 Evas.Draggable_Interface)
{
   eo_prefix: elm_obj_thumb;
   methods {
      @property compress {
         set {
            [[Set the compression for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the compression of the thumb object.

              @since 1.8
            ]]
            return: void; [[Force the return type to be sure the argument
                            doesn't become the return]]
         }
         values {
            compress: int; [[The compression of the thumb.]]
         }
      }
      @property format {
         set {
            [[Set the format for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the format of the thumb object.

              @since 1.8
            ]]
         }
         values {
            format: Ethumb_Thumb_Format; [[The format setting.]]
         }
      }
      @property animate {
         set {
            [[Set the animation state for the thumb object.

              If its content is an animated video, you may start/stop the
              animation or tell it o play continuously and looping.
            ]]
         }
         get {
            [[Get the animation state for the thumb object.]]
         }
         values {
            setting: Elm.Thumb.Animation_Setting; [[The animation setting or
                                                    #ELM_THUMB_ANIMATION_LAST]]
         }
      }
      @property fdo_size {
         set {
            [[Set the FDO size for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the fdo size of the thumb object.

              @since 1.8
            ]]
         }
         values {
            size: Ethumb_Thumb_FDO_Size; [[The FDO size setting.]]
         }
      }
      @property orientation {
         set {
            [[Set the orientation for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the orientation of the thumb object.

              @since 1.8
            ]]
         }
         values {
            orient: Ethumb_Thumb_Orientation; [[The orientation setting.]]
         }
      }
      @property aspect {
         set {
            [[Set the aspect for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the aspect of the thumb object.

              @since 1.8
            ]]
         }
         values {
            aspect: Ethumb_Thumb_Aspect; [[The aspect setting.]]
         }
      }
      @property quality {
         set {
            [[Set the quality for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the quality of the thumb object.

              @since 1.8
            ]]
            return: void;
         }
         values {
            quality: int; [[The quality of the thumb.]]
         }
      }
      @property size {
         set {
            [[Set the size for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the size of the thumb object.

              @since 1.8
            ]]
         }
         values {
            tw: int; [[The width of the thumb.]]
            th: int; [[The height of the thumb.]]
         }
      }
      @property crop_align {
         set {
            [[Set the crop alignment for the thumb object.

              @since 1.8
            ]]
         }
         get {
            [[Get the crop alignment of the thumb object.

              @since 1.8
            ]]
         }
         values {
            cropx: double; [[The x coordinate of the crop.]]
            cropy: double; [[The y coordinate of the crop.]]
         }
      }
      @property path {
         get {
            [[Get the path and key to the image or video thumbnail generated
              by ethumb.

              One just needs to make sure that the thumbnail was generated
              before getting its path; otherwise, the path will be $null.
              One way to do that is by asking for the path when/after the
              "generate,stop" smart callback is called.
            ]]
         }
         values {
            file: const(char)* @optional; [[Pointer to thumb path.]]
            key: const(char)* @optional; [[Pointer to thumb key.]]
         }
      }
      reload {
         [[Reload thumbnail if it was generated before.

           This is useful if the ethumb client configuration changed, like its
           size, aspect or any other property one set in the handle returned
           by elm_thumb_ethumb_client_get().

           If the options didn't change, the thumbnail won't be generated
           again, but the old one will still be used.
         ]]
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Efl.File.file.set;
      Efl.File.file.get;
      Evas.Object_Smart.hide;
      Evas.Object_Smart.add;
      Evas.Object_Smart.del;
      Evas.Object_Smart.show;
      Evas.Draggable_Interface.drag_target.set;
      Evas.Draggable_Interface.drag_target.get;
   }
   events {
      generate,error;
      generate,start;
      generate,stop;
      load,error;
      press;
   }

}
