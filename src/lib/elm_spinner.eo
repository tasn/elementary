class Elm.Spinner (Elm.Layout, Elm_Interface_Atspi_Value, Elm_Interface_Atspi_Widget_Action)
{
   eo_prefix: elm_obj_spinner;
   methods {
      @property min_max {
         [[Control the minimum and maximum values for the spinner.

           Define the allowed range of values to be selected by the user.

           If actual value is less than $min, it will be updated to $min. If it
           is bigger then $max, will be updated to $max. Actual value can be
           get with @.value.get.

           By default, min is equal to 0, and max is equal to 100.

           Warning: Maximum must be greater than minimum.]]
         set {
         }
         get {
         }
         values {
            min: double; [[The minimum value.]]
            max: double; [[The maximum value.]]
         }
      }
      @property step {
         [[Control the step used to increment or decrement the spinner value.

           This value will be incremented or decremented to the displayed value.
           It will be incremented while the user keep right or top arrow pressed,
           and will be decremented while the user keep left or bottom arrow pressed.

           The interval to increment / decrement can be set with @.interval.set.

           By default step value is equal to 1.]]
         set {
         }
         get {
         }
         values {
            step: double; [[The step value.]]
         }
      }
      @property wrap {
         [[Control whether the spinner should wrap when it reaches its minimum or maximum value.

           Disabled by default. If disabled, when the user tries to increment the
           value,
           but displayed value plus step value is bigger than maximum value,
           the new value will be the maximum value.
           The same happens when the user tries to decrement it,
           but the value less step is less than minimum value. In this case,
           the new displayed value will be the minimum value.

           When wrap is enabled, when the user tries to increment the value,
           but displayed value plus step value is bigger than maximum value,
           the new value will be the minimum value. When the the user tries to
           decrement it, but the value less step is less than minimum value,
           the new displayed value will be the maximum value.

           E.g.:
           $min = 10
           $max = 50
           $step = 20
           $displayed = 20

           When the user decrement value (using left or bottom arrow), it will
           displays $50.]]
         set {
         }
         get {
         }
         values {
            wrap: bool; [[$true to enable wrap or $false to disable it.]]
         }
      }
      @property interval {
         [[Control the interval on time updates for an user mouse button hold on spinner widgets' arrows.

           This interval value is decreased while the user holds the
           mouse pointer either incrementing or decrementing spinner's value.

           This helps the user to get to a given value distant from the
           current one easier/faster, as it will start to change quicker and
           quicker on mouse button holds.

           The calculation for the next change interval value, starting from
           the one set with this call, is the previous interval divided by
           $1.05, so it decreases a little bit.

           The default starting interval value for automatic changes is
           $0.85 seconds.]]
         set {
         }
         get {
         }
         values {
            interval: double; [[The (first) interval value in seconds.]]
         }
      }
      @property round {
         [[Control the round value for rounding

           Sets the rounding value used for value rounding in the spinner.]]
         set {
         }
         get {
         }
         values {
            rnd: int; [[The rounding value]]
         }
      }
      @property editable {
         [[Control whether the spinner can be directly edited by the user or not.

           Spinner objects can have edition disabled, in which state they will
           be changed only by arrows.
           Useful for contexts
           where you don't want your users to interact with it writing the value.
           Specially
           when using special values, the user can see real value instead
           of special label on edition.

           It's enabled by default.]]
         set {
         }
         get {
         }
         values {
            editable: bool; [[$true to allow users to edit it or $false to don't allow users to edit it directly.]]
         }
      }
      @property base {
         [[Control the base for rounding

           Rounding works as follows:

           rounded_val = base + (double)(((value - base) / round) * round)

           Where rounded_val, value and base are doubles, and round is an integer.

           This means that things will be rounded to increments (or decrements) of
           "round" starting from value $base. The default base for rounding is 0.

           Example: round = 3, base = 2
           Values: ..., -2, 0, 2, 5, 8, 11, 14, ...

           Example: round = 2, base = 5.5
           Values: ..., -0.5, 1.5, 3.5, 5.5, 7.5, 9.5, 11.5, ...]]
         set {
         }
         get {
         }
         values {
            base: double; [[The base value]]
         }
      }
      @property value {
         [[Control the value the spinner displays.

           Value will be presented on the label following format specified with
           elm_spinner_format_set().

           Warning The value must to be between min and max values. This values
           are set by elm_spinner_min_max_set().]]
         set {
         }
         get {
         }
         values {
            val: double; [[The value to be displayed.]]
         }
      }
      @property label_format {
         [[Control the format string of the displayed label.

           If $NULL, this sets the format to "%.0f". If not it sets the format
           string for the label text. The label text is provided a floating point
           value, so the label text can display up to 1 floating point value.
           Note that this is optional.

           Use a format string such as "%1.2f meters" for example, and it will
           display values like: "3.14 meters" for a value equal to 3.14159.

           Default is "%0.f".]]
         set {
         }
         get {
         }
         values {
            fmt: const(char)* @nullable; [[The format string for the label display.]]
         }
      }
      special_value_add {
         [[Control special string to display in the place of the numerical value.

           It's useful for cases when a user should select an item that is
           better indicated by a label than a value. For example, weekdays or months.

           Note: If another label was previously set to $value, it will be replaced
           by the new label.]]

         /* FIXME-doc
         E.g.:
         @code
         sp = elm_spinner_add(win);
         elm_spinner_min_max_set(sp, 1, 3);
         elm_spinner_special_value_add(sp, 1, "January");
         elm_spinner_special_value_add(sp, 2, "February");
         elm_spinner_special_value_add(sp, 3, "March");
         evas_object_show(sp);
         @endcode
         */
         params {
            @in value: double; [[The value to be replaced.]]
            @in label: const(char)*; [[The label to be used.]]

         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Evas.Object_Smart.add;
      Evas.Object_Smart.del;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.access;
      Elm.Widget.focus_next;
      Elm.Widget.focus_direction;
      Elm.Widget.on_focus;
      Elm.Widget.event;
      Elm.Layout.sizing_eval;
      Elm_Interface_Atspi_Accessible.name.get;
      Elm_Interface_Atspi_Value.value_and_text.get;
      Elm_Interface_Atspi_Value.value_and_text.set;
      Elm_Interface_Atspi_Value.range.get;
      Elm_Interface_Atspi_Value.increment.get;
      Elm_Interface_Atspi_Widget_Action.elm_actions.get;
   }
   events {
      changed;
      delay,changed;
      spinner,drag,start;
      spinner,drag,stop;
      language,changed;
      access,changed;
   }
}
