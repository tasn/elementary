class Elm.Hoversel (Elm.Button, Evas.Selectable_Interface,
                    Evas.Clickable_Interface,
                    Elm_Interface_Atspi_Widget_Action)
{
   eo_prefix: elm_obj_hoversel;
   methods {
      @property horizontal {
         set {
            /*@
            @brief This sets the hoversel to expand horizontally.

            @note The initial button will display horizontally regardless of this
            setting.

            @ingroup Hoversel */
         }
         get {
            /*@
            @brief This returns whether the hoversel is set to expand horizontally.

            @return If true, the hover will expand horizontally to the right.

            @see elm_hoversel_horizontal_set()

            @ingroup Hoversel */
         }
         values {
            horizontal: bool; /*@ If true, the hover will expand horizontally to the
            right. */
         }
      }
      @property hover_parent {
         set {
            /*@
            @brief Set the Hover parent

            Sets the hover parent object, the area that will be darkened when the
            hoversel is clicked. Should probably be the window that the hoversel is
            in. See @ref Hover objects for more information.

            @ingroup Hoversel */
         }
         get {
            /*@
            @brief Get the Hover parent

            @return The used parent

            Get the hover parent object.

            @see elm_hoversel_hover_parent_set()

            @ingroup Hoversel */
         }
         values {
            parent: Evas.Object * @nullable; /*@ The parent to use */
         }
      }
      @property expanded {
         get {
            /*@
            @brief Returns whether the hoversel is expanded.

            @return This will return @c EINA_TRUE if the hoversel is expanded or
            @c EINA_FALSE if it is not expanded.

            @ingroup Hoversel */
            return: bool;
         }
      }
      @property items {
         get {
            /*@
            @brief Get the list of items within the given hoversel.

            @return Returns a list of Elm.Widget_Item

            @see elm_hoversel_item_add()

            @ingroup Hoversel */
            return: const(list<Elm.Widget_Item *>)*;
         }
      }
      @property scroll_enabled {
         get {
            /*@
            @brief Limit the size of contents and make them scrollable.

            @ingroup Hoversel */
         }
         set {
            /*@
            @brief Returns whether the contents of hoversel are scrollable or not.

            @return @c EINA_TRUE scrollable. @c EINA_FALSE otherwise.

            @ingroup Hoversel */
         }
         values {
            scroll_enabled: bool;
         }
      }
      hover_begin {
         /*@
         @brief This triggers the hoversel popup from code, the same as if the user
         had clicked the button.

         @ingroup Hoversel */

      }
      clear {
         /*@
         @brief This will remove all the children items from the hoversel.

         @warning Should @b not be called while the hoversel is active; use
         elm_hoversel_expanded_get() to check first.

         @see elm_object_item_del()

         @ingroup Hoversel */

      }
      hover_end {
         /*@
         @brief This dismisses the hoversel popup as if the user had clicked
         outside the hover.

         @ingroup Hoversel */

      }
      item_add {
         /*@
         @brief Add an item to the hoversel button

         @return A handle to the item added.

         This adds an item to the hoversel to show when it is clicked. Note: if you
         need to use an icon from an edje file then use
         elm_hoversel_item_icon_set() right after this function, and set
         icon_file to NULL here.

         For more information on what @p icon_file and @p icon_type are, see the
         @ref Icon "icon documentation".

         @ingroup Hoversel */

         return: Elm.Widget_Item *;
         params {
            @in label: const(char)* @optional; /*@ The text label to use for the item (NULL if not desired) */
            @in icon_file: const(char)* @optional; /*@ An image file path on disk to use for the icon or standard
            icon name (NULL if not desired) */
            @in icon_type: Elm_Icon_Type; /*@ The icon type if relevant */
            @in func: Evas_Smart_Cb @optional; /*@ Convenience function to call when this item is selected. The last
            parameter @p event_info of @c func is the selected item pointer. */
            @in data: const(void)* @optional; /*@ Data to pass to item-related functions */
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Eo.Base.destructor;
      Evas.Object_Smart.hide;
      Evas.Object_Smart.show;
      Evas.Object_Smart.add;
      Evas.Object_Smart.del;
      Elm.Widget.parent.set;
      Elm.Widget.theme_apply;
      Elm.Widget.translate;
      Elm.Widget.event;
      Elm.Button.admits_autorepeat.get;
      Elm_Interface_Atspi_Widget_Action.elm_actions.get;
   }
   events {
      dismissed;
      expanded;
      item,focused;
      item,unfocused;
      language,changed;
      access,changed;
   }

}
