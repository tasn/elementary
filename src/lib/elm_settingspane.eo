class Elm.Settingspane(Elm.Layout) {
   eo_prefix: elm_obj_settingspane;
   methods {
      focused_get {
        [[
          Returns the item which is currently displayed
        ]]
        return : Elm.Settingspane.Item*;
      }
      item_get {
        [[
          Return the Item from this path

          This will search the item of the given paths.
          If the path is "settings/monitor/resolution"
          The Item resolution in the parent "monitor" in the parent "settings" will be searched.
          If the item is found, it will be retured, if it isnt, NULL is returned
        ]]
        return : Elm.Settingspane.Item*;
        params {
          @in paths : const(char)*; [[the path of the item to return]]
        }
      }
      item_append {
        [[
          Append a item.

          This will append a item with the given name, description and icon to the widget,
          if par is not NULL it will be placed as a child of par. If par is NULL it will be placed in the 0 level.

          \@ref elm_obj_settingspane_item_append_relative
        ]]
        return : Elm.Settingspane.Item*;
        params {
          @in data : void*; [[data to attach to the item which gets passed to the callback]]
          @in name : const(char)*; [[name of the item]]
          @in par : Elm.Settingspane.Item*; [[parent of this item, it will be shown when the parent item is selected. If NULL it will be appended to the 0 lvl ]]
        }
      }
      item_append_relative {
        [[
          Append a item relative

          This will append a item like item_append, with the only difference that it will be appended to rel,
          The parent of rel will be took as parent.

          note that this will fail if rel is NULL

          \@ref item_append
        ]]
        return : Elm.Settingspane.Item *;
        params {
          @in data : void*; [[data to attach to the item which gets passed to the callback]]
          @in name : const(char)*; [[name of the item ]]
          @in rel : Elm.Settingspane.Item*; [[the item after which the current one will be appended, if NULL the call will fail!]]
        }
      }
   }
   implements {
     Eo.Base.constructor;
     Eo.Base.destructor;
     Evas.Object_Smart.add;
     Evas.Object_Smart.show;
     Elm.Layout.content_aliases.get;
   }
}
