class Elm.Settingspane.Item(Eo.Base){
  eo_prefix: elm_obj_settingspane_item;
  methods {
    @property name {
      get {
        [[
          Get the name of the item

          This will return the name which was passed at the creation via append_item or item_append_relative
          This is the string displayed in the item.
        ]]
      }
      values {
        name : const(char)*;
      }
    }
    @property description {
      set {
        [[
          Will set the desrciption for the item.

          It will be displayed when you hover the item.
        ]]
      }
      get {
        [[
           Get the description of the item

           This will return the description which was passed at the creation via
           append_item or item_append_relative.
           This is the string displayed lower of the name.
        ]]
      }
      values {
        description : const(char)*;
      }
    }
    @property image {
      set {
      }
      get {
      }
      values {
        file : const(char)*;
        group : const(char)*;
      }
    }
    @property changed {
      [[
        This will mark this item internally as changed,
        the apply button will be enabled, and the item cannot be poped from stack anymore.
        This can be undo if the user clicks the apply or reset button.
      ]]
      get {
        [[
          Returns the changed flag

          This returns the changed flag of this Item.

          The changed flag controls the enable/disable of the apply and reset buttons,
          and controls if the panel can be closed.

          If this flag is set the apply and reset buttons are enabled, a click on them will
          result in the callbacks to the panel.
          If someone tryes to close this panel while there are unsaved changes,
          the panel will be highlighted with an error.
        ]]
      }
      set {
        [[
          Set the chagned flag

          This will set the changed flag for this item.

          The changed flag controls the enable/disable of the apply and reset buttons,
          and controls if the panel can be closed.

          If this flag is set the apply and reset buttons are enabled, a click on them will
          result in the callbacks to the panel.
          If someone tryes to close this panel while there are unsaved changes,
          the panel will be highlighted with an error.

          noet that if this item doesnt have a attached panel settings this is useless

        ]]
      }
      values {
        changed : bool; [[set this item to changed]]
      }
    }
    @property keywords {
      get {
      }
      set {
       [[
         Set the keywords

         This is the string for the search of a item

         The string should be from the form word[,word2]
         The value of the searchentry will be compared against the values seperated by a ","
       ]]
      }
      values {
        word : const(char)*;
      }
    }
    realize {
      [[
        This will realize this item, means display it if it does not exists yet, or raise it
      ]]
    }
    unrealize {
      [[
        Will delete or just hide this item depending if there are unsaved changes or not
      ]]
    }
    attach_panel {
      [[
        Attach a panel to the item

        This will attach a panel to this item.

        Attaching a panel means if this items gets focused this panel will be shown.

        The callback content_get is just called if this item gets displayed.
        If it was closed once and opened another time the callback will be called a second time.

        reset and apply are called when the apply or reset button is clicked.

        Note that if the panel can just be attached if this node doenst have childs.
        Note that if once the panel has a panel it cannot be used as a parent node anymore.
      ]]
      params {
             @in content_get : Content_Get_Cb; [[ Callback to call when the content is requested
                                                 Each time the panel is selected content is requested with the content_cb,
                                                 If the content is changed the old Evas_Object will be saved and displayed next time the item is selected.
                                                 ]]
             @in reset : Evas_Smart_Cb; [[Callback to call when the reset button is clicked]]
             @in apply : Evas_Smart_Cb; [[Callback to call when the apply button is clicked]]
      }
    }
    focus {
      [[
        Focus this item

        This will focus the item in the widget, this means its children will be displayed in the menu,
        or the attached panel will be shown, this item will be the highest on the stack.
      ]]
    }
  }
  implements {
     Eo.Base.destructor;
   }
}
