struct Elm.Event.Policy_Changed
{
   [[Data on the event when an Elementary policy has changed]]
   policy: uint; [[the policy identifier]]
   new_value: int; [[value the policy had before the change]]
   old_value: int; [[new value the policy got]]
}

struct Elm.Gen.Item.Class.Functions
{
   text_get: Elm_Gen_Item_Text_Get_Cb; [[ Text fetching class function for
                                          genlist/gengrid item classes. ]]
   content_get: Elm_Gen_Item_Content_Get_Cb; [[ Content fetching class function
                                                for genlist/gengrid item classes. ]]
   state_get: Elm_Gen_Item_State_Get_Cb; [[ State fetching class function for
                                            genlist/gengrid item classes. ]]
   del: Elm_Gen_Item_Del_Cb; [[ Deletion class function for genlist/gengrid
                                item classes. ]]
   filter_get: Elm_Gen_Item_Filter_Get_Cb;  [[ Filter seeking class function for
                                               genlist/gengrid item classes. ]]
}

struct Elm.Gen.Item.Class
{
   [[ Gengrid or Genlist item class definition. ]]
   version: int; [[Set by elementary if you alloc an item class using
                   elm_genlist/gengrid_item_class_new(), or if you set your own
                   class (must be const) then set it to
                   ELM_GENLIST/GENGRID_ITEM_CLASS_VERSION. ]]
   refcount: uint; [[ Set it to 0 if you use your own const class, or
                              its managed for you by class ref/unref calls. ]]
   delete_me: bool; [[ Leave this alone - set it to 0 if you have a
                               const class of your own. ]]
   item_style: const(char) *; [[ Name of the visual style to use for this item.
                                If you don't know use "default". ]]
   decorate_item_style: const(char) *; [[ Style used if item is set to a decorate
                                         mode. see elm_genlist_item_decorate_mode_set()
                                         or NULL if you don't care. currently
                                         it's used only in genlist. ]]
   decorate_all_item_style: const(char) *; [[ Style to use when in edit mode, or
                                             NULL if you don't care. Currently
                                             it's used only in genlist. ]]
   func: Elm.Gen.Item.Class.Functions; [[ Set of callbacks ]]
}

type Elm.Gengrid.Item.Class: Elm.Gen.Item.Class; [[ See @Elm.Gen.Item.Class. ]]

type Elm.Genlist.Item.Class: Elm.Gen.Item.Class; [[ See @Elm.Gen.Item.Class. ]]

enum Elm.Glob.Match_Flags
{
   [[Glob matching bitfiled flags. @since 1.11]]
   legacy: elm_glob_match;
   no_escape = (1 << 0), [[Treat backslash as an ordinary character instead of escape]]
   path = (1 << 1), [[Match a slash in string only with a slash in pattern and not by
                      an asterisk (*) or a question mark (?) metacharacter, nor by a
                      bracket expression ([]) containing a slash.]]
   period = (1 << 2), [[Leading  period in string has to be matched exactly by a period
                        in pattern. A period is considered to be leading if it is the
                        first character in string, or if both ELM_GLOB_MATCH_PATH is
                        set and the period immediately follows a slash.]]
   nocase = (1 << 3), [[The pattern is matched case-insensitively.]]
}

enum Elm.Policy
{
   [[Policy identifiers.]]
   quit, [[under which circumstances the application should quit automatically.
           See also @Elm.Policy.quit.]]
   exit, [[defines elm_exit() behaviour. See also @Elm.Policy.exit.

           @since 1.8
         ]]
   throttle, [[defines how throttling should work. See also @Elm.Policy.throttle

               @since 1.8
             ]]
   last
}

enum Elm.Policy.Quit
{
   [[Possible values for the #ELM_POLICY_QUIT policy]]
   none = 0, [[never quit the application automatically]]
   last_window_closed, [[quit when the application's last window is closed]]
   last_window_hidden [[quit when the application's last window is hidden

                        @since 1.14]]
}

enum Elm.Policy.Exit
{
   [[Possible values for the #ELM_POLICY_EXIT policy.

     @since 1.8
   ]]
   none = 0, [[just quit the main loop on elm_exit()]]
   windows_del [[delete all the windows after quitting the main loop]]
}

enum Elm.Policy.Throttle
{
   [[Possible values for the #ELM_POLICY_THROTTLE policy.

     @since 1.8
   ]]
   config = 0, [[do whatever elementary config is configured to do]]
   hidden_always, [[always throttle when all windows are no longer visible]]
   never [[never throttle when windows are all hidden, regardless of config
           settings]]
}

enum Elm.Object.Select_Mode
{
   [[Possible values for the #ELM_OBJECT_SELECT_MODE policy.

     @since 1.7
   ]]
   default = 0, [[default select mode. Once an item is selected, it would stay
                  highlighted and not going to call selected callback again
                  even it was clicked. Items can get focus.]]
   always, [[always select mode. Item selected callbacks will be called every
             time for click events, even after the item was already selected.
             Items can get focus.]]
   none, [[no select mode. Items will never be highlighted and selected but
           the size will be adjusted by the finger size configuration. Items
           can't get focus.]]
   display_only, [[no select mode with no finger size rule. Items will never
                   be highlighted and selected and ignore the finger size. So
                   the item size can be reduced below than the finger size
                   configuration. Items can't get focus.]]
   max [[canary value: any value greater or equal to ELM_OBJECT_SELECT_MODE_MAX
         is forbidden.]]
}

enum Elm.Object.Multi_Select_Mode
{
   [[Possible values for the #ELM_OBJECT_MULTI_SELECT_MODE policy.

     @since 1.8
   ]]
   default = 0, [[default multiple select mode]]
   with_control, [[disallow mutiple selection when clicked without control key
                   pressed]]
   max [[canary value: any value greater or equal to
         ELM_OBJECT_MULTI_SELECT_MODE_MAX is forbidden.]]
}

enum Elm.Wrap.Type
{
   [[Line wrapping types.
     Type of word or character wrapping to use.

     See also \@ref elm_entry_line_wrap_set, \@ref
     elm_popup_content_text_wrap_type_set, \@ref elm_label_line_wrap_set.
   ]]

   legacy: elm_wrap;
   none = 0, [[No wrap - value is zero.]]
   char,     [[Char wrap - wrap between characters.]]
   word,     [[Word wrap - wrap in allowed wrapping points (as defined in the unicode standard).]]
   mixed,    [[Mixed wrap - Word wrap, and if that fails, char wrap.]]
   last
}

enum Elm.Focus_Direction
{
   [[ Focus directions. ]]
   legacy: elm_focus;
   previous, [[ previous direction ]]
   next,     [[ next direction ]]
   up,       [[ up direction ]]
   down,     [[ down direction ]]
   right,    [[ right direction ]]
   left,     [[ left direction ]]
}

enum Elm.App.View_State
{
   unknown = 0,
   live,
   paused,
   closed,
   shallow,
}

